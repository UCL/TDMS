%!PS-Adobe-3.0
%%Title: mesh_base.cpp
%%For: Peter Munro
%%Creator: a2ps version 4.14
%%CreationDate: Mon Apr 22 13:20:01 2013
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 6
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed string
% Version 1.2 1/31/1990
% Orignal Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*****************************************************************) c n
( *) N
( *  Project.....:  isotropic FDTD code) N
( *  Application.:  generation of orientated mesh) N
( *  Module......:  mesh_base.cpp) N
( *  Description.:  Generate an oriented mesh on the surface of a cuboid) N
( *                 within the FDTD grid.) N
( *  Compiler....:  g++) N
( *  Written by..:  Peter Munro, Imperial College London, 2002-2008) N
( *  Environment.:  Linux) N
( *  Modified....:  Numerous times) N
( *) N
( ******************************************************************/) N
() p n
(/*---------------------------------------------------------------*/) c n
(//                        INCLUDE section) N
(/*---------------------------------------------------------------*/) N
() p n
(#include) K
( ") p
(math.h) str
(") p n
(#include) K
( <complex>) p n
(#include) K
( ") p
(matio.h) str
(") p n
() N
(using) K
( ) p
(namespace) K
( std;) p n
(#include) K
( ") p
(matlabio.h) str
(") p n
(#include) K
( ") p
(mesh_base.h) str
(") p n
() N
() N
(/*Generate a matrix of vertices which define a triangulation of a regular) c n
(  two dimensional grid. This function assumes that the space of interest) N
(  is a 2d surface with coordinates \(i,j\). I0 represents the lowest value ) N
(  of i for any point on the rectangular grid and I1 the highest. Similarly) N
(  for j. A value of k is constant. A line of the output matrix looks like:) N
() N
(  i1 j1 k i2 j2 k i3 j3 k) N
(  ) N
(  Triangles are taken by subdividing squares in the grid in a regular manner.) N
() N
(  coordmap is an integer array with three entries. This array can be a permutati) N
(on of) N
(  {0,1,2}. This defines the mapping between i,j,k and the indices in the output ) N
(matrix. ) N
(  For example, if coordmap = {0,1,2} then a row in the matric would look like:) N
(  ) N
(  i1 j1 k i2 j2 k i3 j3 k) N
() N
(  If, however, we have coordmap = {2,1,0} then we would get) N
() N
(  k j1 i1 k j2 i2 k j3 i3) N
() N
(  This should be interpreted as original i colums moves to column k. original k ) N
(column moves to column i.) N
(  ) N
() N
(    i) N
( I1 ^ .  .  .  .) N
(    | .  .  .  .) N
( I0 | .  .  .  .  ) N
(    +------------>j) N
(     J0        J1) N
() N
() N
(  order specifies the direction of the surface normals of the triangles. This) N
(  can take only 2 possible values +1 or -1. They have the following meaning:) N
(  ) N
(  order = 1 means that the surface normal for a triangle in the:) N
(                                  xy plane will || to the z-axis) N
() S 8 T () S 16 T () S 24 T () S 32 T (  zy plane will || to the x-axis) N
() S 8 T () S 16 T () S 24 T () S 32 T (  xz plane will || to the negative z-axis) N
() S 8 T () S 16 T () N
(mesh_base.cpp) (Page 1/11) (Jun 20, 12 11:46) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  order = -1 means surface normals are in the opposite direction. The surface no) c n
(rmal) N
(  is assumed to be in the direction \(p2-p1\)x\(p3-p1\) where p1-p3 are the points w) N
(hich ) N
(  define the triangle, in the order that they are listed in the facet matrix.) N
() N
(  The space allocated by *vertexMatrix must be freed after use.) N
(*/) N
() p n
(void) k
( triangulatePlane\() p
(int) k
( I0, ) p
(int) k
( I1, ) p
(int) k
( J0, ) p
(int) k
( J1, ) p
(int) k
( K,) p
(int) k
( coordmap[], ) p
(int) k
( ) p n
(order, mxArray **vertexMatrix\){) N
(  ) S
(int) k
( i, j, ndims, dims[2], counter = 0;) p n
(  ) S
(int) k
( temp_res[] = {0,0,0};) p n
(  ) S
(int) k
( **vertices;) p n
(  ) S
(char) k
( buffer[100];) p n
(  ) N
(  ) S
(//first some basic error checks) c n
(  ) p
(/*  if\( I1 <= I0 \)) c n
(    mexErrMsgTxt\("Error in triangulatePlane\(\), must have I1 > I0"\);) N
(  if\( J1 <= J0 \)) N
(    mexErrMsgTxt\("Error in triangulatePlane\(\), must have J1 > J0"\);) N
(  */) N
(  ) p
(//now check that coordmap is correct, should be a permutation on {0,1,2}) c n
(  ) p
(for) K
(\(i=0;i<=2;i++\)) p n
(    ) S
(for) K
(\(j=0;j<=2;j++\)) p n
(      temp_res[j] = temp_res[j] || coordmap[i]==j;) N
(  ) N
(  ) S
(//check all numbers are within range and none are equal) c n
(  ) p
(if) K
(\( !\(temp_res[0] && temp_res[1] && temp_res[2]\) || \(coordmap[0]==coordmap[1]\)) p n
( || \(coordmap[1]==coordmap[2]\) || \(coordmap[0]==coordmap[2]\)\){) N
(    sprintf\(buffer,") S
(Error in triangulatePlane\(\), coordmap incorrect [%d %d %d], [%d %d %d]) str
(",coordmap) p n
([0],coordmap[1],coordmap[2],temp_res[0],temp_res[1],temp_res[2]\);) N
(    mexErrMsgTxt\(buffer\);) N
(  ) N
(  }) N
() N
(  ndims = 2;) N
(  ) N
(  dims[1] = 9;                ) S
(//each triangle has 3 vertices and each vertex has) c n
( three indices) N
(  dims[0] = 2*\(I1-I0\)*\(J1-J0\);) p
(//number of triangles) c n
( ) p n
(   ) N
(  *vertexMatrix =  mxCreateNumericArray\( ndims, \() S
(const) K
( mwSize *\)dims, mxINT32_CL) p n
(ASS, mxREAL\);) N
() N
(  vertices = castMatlab2DArrayInt\(\() S
(int) k
( *\)mxGetPr\(*vertexMatrix\), dims[0], dims[1) p n
(]\);) N
(  ) N
(  ) S
(if) K
(\( !\(order==1 || order==-1\) \)) p n
(    mexErrMsgTxt\(") S
(Error in triangulatePlane\(\), order can take the value of +1 or -1) str
("\);) p n
(  ) N
(  ) S
(if) K
(\( order == 1\)) p n
(    ) S
(for) K
(\(j=J0;j<J1;j++\)) p n
(      ) S
(for) K
(\(i=I0;i<I1;i++\){) p n
() S 8 T () S
(//triangle 1) c n
() p 8 T () S
(//vertex 1) c n
() p 8 T (vertices[coordmap[0]][counter]   =   i;) N
() S 8 T (vertices[coordmap[1]][counter]   =   j;) N
() S 8 T (vertices[coordmap[2]][counter]   =   K;) N
() S 8 T () N
() S 8 T () S
(///vertex 2) c n
() p 8 T (vertices[3+coordmap[0]][counter]   =   i+1;) N
() S 8 T (vertices[3+coordmap[1]][counter]   =   j;) N
() S 8 T (vertices[3+coordmap[2]][counter]   =   K;) N
() S 8 T () N
() S 8 T () S
(///vertex 3) c n
() p 8 T (vertices[6+coordmap[0]][counter]   =   i;) N
() S 8 T (vertices[6+coordmap[1]][counter]   =   j+1;) N
(mesh_base.cpp) (Page 2/11) (Jun 20, 12 11:46) title
border
grestore
(Printed by Peter Munro) rhead
(mesh_base.cpp) (1/6) (Monday April 22, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (vertices[6+coordmap[2]][counter++]   =   K;) N
() S 8 T () N
() S 8 T () S
(//triangle 2) c n
() p 8 T () S
(//vertex 1) c n
() p 8 T (vertices[coordmap[0]][counter]   =   i+1;) N
() S 8 T (vertices[coordmap[1]][counter]   =   j;) N
() S 8 T (vertices[coordmap[2]][counter]   =   K;) N
(      ) N
() S 8 T () S
(///vertex 2) c n
() p 8 T (vertices[6+coordmap[0]][counter]   =   i;) N
() S 8 T (vertices[6+coordmap[1]][counter]   =   j+1;) N
() S 8 T (vertices[6+coordmap[2]][counter]   =   K;) N
() S 8 T () N
() S 8 T () S
(///vertex 3) c n
() p 8 T (vertices[3+coordmap[0]][counter]   =   i+1;) N
() S 8 T (vertices[3+coordmap[1]][counter]   =   j+1;) N
() S 8 T (vertices[3+coordmap[2]][counter++]   =   K;) N
() S 8 T () N
(      }) N
(  ) S
(else) K n
(     ) p
(for) K
(\(j=J0;j<J1;j++\)) p n
(      ) S
(for) K
(\(i=I0;i<I1;i++\){) p n
() S 8 T () S
(//triangle 1) c n
() p 8 T () S
(//vertex 1) c n
() p 8 T (vertices[coordmap[0]][counter]   =   i;) N
() S 8 T (vertices[coordmap[1]][counter]   =   j;) N
() S 8 T (vertices[coordmap[2]][counter]   =   K;) N
() S 8 T () N
() S 8 T () S
(///vertex 2) c n
() p 8 T (vertices[6+coordmap[0]][counter]   =   i+1;) N
() S 8 T (vertices[6+coordmap[1]][counter]   =   j;) N
() S 8 T (vertices[6+coordmap[2]][counter]   =   K;) N
() S 8 T () N
() S 8 T () S
(///vertex 3) c n
() p 8 T (vertices[3+coordmap[0]][counter]   =   i;) N
() S 8 T (vertices[3+coordmap[1]][counter]   =   j+1;) N
() S 8 T (vertices[3+coordmap[2]][counter++]   =   K;) N
() S 8 T () N
() S 8 T () S
(//triangle 2) c n
() p 8 T () S
(//vertex 1) c n
() p 8 T (vertices[coordmap[0]][counter]   =   i+1;) N
() S 8 T (vertices[coordmap[1]][counter]   =   j;) N
() S 8 T (vertices[coordmap[2]][counter]   =   K;) N
(      ) N
() S 8 T () S
(///vertex 2) c n
() p 8 T (vertices[3+coordmap[0]][counter]   =   i;) N
() S 8 T (vertices[3+coordmap[1]][counter]   =   j+1;) N
() S 8 T (vertices[3+coordmap[2]][counter]   =   K;) N
() S 8 T () N
() S 8 T () S
(///vertex 3) c n
() p 8 T (vertices[6+coordmap[0]][counter]   =   i+1;) N
() S 8 T (vertices[6+coordmap[1]][counter]   =   j+1;) N
() S 8 T (vertices[6+coordmap[2]][counter++]   =   K;) N
() S 8 T () N
(      }) N
() N
(  ) S
(//now free memory) c n
(  ) p n
(  freeCastMatlab2DArrayInt\(vertices\);) N
(}) N
() N
(void) k
( triangulatePlaneSkip\() p
(int) k
( I0, ) p
(int) k
( I1, ) p
(int) k
( J0, ) p
(int) k
( J1, ) p
(int) k
( K,) p
(int) k
( coordmap[], ) p
() k n
(int) S
( order, mxArray **vertexMatrix, ) p
(int) k
( dI, ) p
(int) k
( dJ\){) p n
(  ) S
(int) k
( i, j, ndims, dims[2], counter = 0, countI = 0, countJ = 0;) p n
(  ) S
(int) k
( temp_res[] = {0,0,0};) p n
(  ) S
(int) k
( **vertices;) p n
(  ) S
(char) k
( buffer[100];) p n
(  ) N
(  ) S
(//first some basic error checks) c n
(mesh_base.cpp) (Page 3/11) (Jun 20, 12 11:46) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  ) p
(/*  if\( I1 <= I0 \)) c n
(    mexErrMsgTxt\("Error in triangulatePlane\(\), must have I1 > I0"\);) N
(  if\( J1 <= J0 \)) N
(    mexErrMsgTxt\("Error in triangulatePlane\(\), must have J1 > J0"\);) N
(  */) N
(  ) p
(//now check that coordmap is correct, should be a permutation on {0,1,2}) c n
(  ) p
(for) K
(\(i=0;i<=2;i++\)) p n
(    ) S
(for) K
(\(j=0;j<=2;j++\)) p n
(      temp_res[j] = temp_res[j] || coordmap[i]==j;) N
(  ) N
(  ) S
(//check all numbers are within range and none are equal) c n
(  ) p
(if) K
(\( !\(temp_res[0] && temp_res[1] && temp_res[2]\) || \(coordmap[0]==coordmap[1]\)) p n
( || \(coordmap[1]==coordmap[2]\) || \(coordmap[0]==coordmap[2]\)\){) N
(    sprintf\(buffer,") S
(Error in triangulatePlane\(\), coordmap incorrect [%d %d %d], [%d %d %d]) str
(",coordmap) p n
([0],coordmap[1],coordmap[2],temp_res[0],temp_res[1],temp_res[2]\);) N
(    mexErrMsgTxt\(buffer\);) N
(  ) N
(  } ) N
() N
(  ndims = 2;) N
(  ) N
(  dims[1] = 9;) S
(//each triangle has 3 vertices and each vertex has three indices) c n
() p n
(  ) S
(for) K
(\(i=I0;i<=I1;i=i+dI\)) p n
(    countI++;) N
(  ) S
(for) K
(\(j=J0;j<=J1;j=j+dJ\)) p n
(    countJ++;) N
( ) N
() N
(  dims[0] = 2*\(countI-1\)*\(countJ-1\);) S
(//number of triangles) c n
(  ) p n
(  *vertexMatrix =  mxCreateNumericArray\( ndims, \() S
(const) K
( mwSize *\)dims, mxINT32_CL) p n
(ASS, mxREAL\);) N
(  vertices = castMatlab2DArrayInt\(\() S
(int) k
( *\)mxGetPr\(*vertexMatrix\), dims[0], dims[1) p n
(]\);) N
(  ) S
(if) K
(\(1\){  ) p n
(  ) S
(if) K
(\( !\(order==1 || order==-1\) \)) p n
(    mexErrMsgTxt\(") S
(Error in triangulatePlane\(\), order can take the value of +1 or -1) str
("\);) p n
(   ) N
(  ) S
(if) K
(\( order == 1\)) p n
(    ) S
(for) K
(\(j=J0;j<=\(J1-dJ\);j=j+dJ\)) p n
(      ) S
(for) K
(\(i=I0;i<=\(I1-dI\);i=i+dI\){) p n
() S 8 T () S
(//triangle 1) c n
() p 8 T () S
(//vertex 1) c n
() p 8 T (vertices[coordmap[0]][counter]   =   i;) N
() S 8 T (vertices[coordmap[1]][counter]   =   j;) N
() S 8 T (vertices[coordmap[2]][counter]   =   K;) N
() S 8 T () N
() S 8 T () S
(///vertex 2) c n
() p 8 T (vertices[3+coordmap[0]][counter]   =   i+dI;) N
() S 8 T (vertices[3+coordmap[1]][counter]   =   j;) N
() S 8 T (vertices[3+coordmap[2]][counter]   =   K;) N
() S 8 T () N
() S 8 T () S
(///vertex 3) c n
() p 8 T (vertices[6+coordmap[0]][counter]   =   i;) N
() S 8 T (vertices[6+coordmap[1]][counter]   =   j+dJ;) N
() S 8 T (vertices[6+coordmap[2]][counter++]   =   K;) N
() N
() S 8 T () S
(//triangle 2) c n
() p 8 T () S
(//vertex 1) c n
() p 8 T (vertices[coordmap[0]][counter]   =   i+dI;) N
() S 8 T (vertices[coordmap[1]][counter]   =   j;) N
() S 8 T (vertices[coordmap[2]][counter]   =   K;) N
(      ) N
() S 8 T () S
(///vertex 2) c n
() p 8 T (vertices[6+coordmap[0]][counter]   =   i;) N
() S 8 T (vertices[6+coordmap[1]][counter]   =   j+dJ;) N
() S 8 T (vertices[6+coordmap[2]][counter]   =   K;) N
() S 8 T () N
(mesh_base.cpp) (Page 4/11) (Jun 20, 12 11:46) title
border
grestore
(Printed by Peter Munro) rhead
(mesh_base.cpp) (2/6) (Monday April 22, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(///vertex 3) c n
() p 8 T (vertices[3+coordmap[0]][counter]   =   i+dI;) N
() S 8 T (vertices[3+coordmap[1]][counter]   =   j+dJ;) N
() S 8 T (vertices[3+coordmap[2]][counter++]   =   K;) N
() N
(      }) N
(  ) S
(else) K n
(    ) p
(for) K
(\(j=J0;j<=\(J1-dJ\);j=j+dJ\)) p n
(      ) S
(for) K
(\(i=I0;i<=\(I1-dI\);i=i+dI\){) p n
() N
() S 8 T () S
(//triangle 1) c n
() p 8 T () S
(//vertex 1) c n
() p 8 T (vertices[coordmap[0]][counter]   =   i;) N
() S 8 T (vertices[coordmap[1]][counter]   =   j;) N
() S 8 T (vertices[coordmap[2]][counter]   =   K;) N
() S 8 T () N
() S 8 T () S
(///vertex 2) c n
() p 8 T (vertices[6+coordmap[0]][counter]   =   i+dI;) N
() S 8 T (vertices[6+coordmap[1]][counter]   =   j;) N
() S 8 T (vertices[6+coordmap[2]][counter]   =   K;) N
() S 8 T () N
() S 8 T () S
(///vertex 3) c n
() p 8 T (vertices[3+coordmap[0]][counter]   =   i;) N
() S 8 T (vertices[3+coordmap[1]][counter]   =   j+dJ;) N
() S 8 T (vertices[3+coordmap[2]][counter++]   =   K;) N
() S 8 T () N
() S 8 T () S
(//triangle 2) c n
() p 8 T () S
(//vertex 1) c n
() p 8 T (vertices[coordmap[0]][counter]   =   i+dI;) N
() S 8 T (vertices[coordmap[1]][counter]   =   j;) N
() S 8 T (vertices[coordmap[2]][counter]   =   K;) N
(      ) N
() S 8 T () S
(///vertex 2) c n
() p 8 T (vertices[3+coordmap[0]][counter]   =   i;) N
() S 8 T (vertices[3+coordmap[1]][counter]   =   j+dJ;) N
() S 8 T (vertices[3+coordmap[2]][counter]   =   K;) N
() S 8 T () N
() S 8 T () S
(///vertex 3) c n
() p 8 T (vertices[6+coordmap[0]][counter]   =   i+dI;) N
() S 8 T (vertices[6+coordmap[1]][counter]   =   j+dJ;) N
() S 8 T (vertices[6+coordmap[2]][counter++]   =   K;) N
() S 8 T () N
(      }) N
(  ) N
(  ) S
(//now free memory) c n
(  ) p n
(  freeCastMatlab2DArrayInt\(vertices\);) N
(  }) N
(}) N
() N
(/*vertexMatrix should be a 6 element array. Generates 6 arrays of facets using t) c n
(riangulatePlane.) N
( Each matrix is a plane of the cuboid which is defined by:) N
(                    ) N
( \(I0,I1\)x\(J0,J1\)x\(K0,K1\)) N
() N
( Each vertexMatrix[i] should be destroyed after calling this function) N
(*/) N
() p n
(void) k
( triangulateCuboid\() p
(int) k
( I0, ) p
(int) k
( I1, ) p
(int) k
( J0, ) p
(int) k
( J1, ) p
(int) k
( K0, ) p
(int) k
( K1, mxArray *) p n
(*vertexMatrix\){) N
(  ) S
(/*) c n
(  if\( I1 <= I0 \)) N
(    mexErrMsgTxt\("Error in triangulateCuboid\(\), must have I1 > I0"\);) N
(  if\( J1 <= J0 \)) N
(    mexErrMsgTxt\("Error in triangulateCuboid\(\), must have J1 > J0"\);) N
(  if\( K1 <= K0 \)) N
(    mexErrMsgTxt\("Error in triangulateCuboid\(\), must have K1 > K0"\);) N
(  */) N
(mesh_base.cpp) (Page 5/11) (Jun 20, 12 11:46) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  ) p
(int) k
( coordmap1[] = {0,1,2};) p n
(  ) S
(int) k
( coordmap2[] = {1,2,0};) p n
(  ) S
(int) k
( coordmap3[] = {0,2,1};) p n
(  ) N
(  triangulatePlane\(I0, I1, J0, J1, K0, coordmap1, -1, &vertexMatrix[0]\);) S
(//-ve z-) c n
(axis s norm) N
(  triangulatePlane\(I0, I1, J0, J1, K1, coordmap1,  1, &vertexMatrix[1]\);) p
(//+ve z-) c n
(axis s norm) N
(  ) p n
(  triangulatePlane\(J0, J1, K0, K1, I0, coordmap2, -1, &vertexMatrix[2]\);) S
(//-ve x-) c n
(axis s norm) N
(  triangulatePlane\(J0, J1, K0, K1, I1, coordmap2,  1, &vertexMatrix[3]\);) p
(//+ve x-) c n
(axis s norm) N
() p n
(  triangulatePlane\(I0, I1, K0, K1, J0, coordmap3,  1, &vertexMatrix[4]\);) S
(//-ve y-) c n
(axis s norm) N
(  triangulatePlane\(I0, I1, K0, K1, J1, coordmap3, -1, &vertexMatrix[5]\);) p
(//+ve y-) c n
(axis s norm) N
(}) p n
() N
(void) k
( triangulateCuboidSkip\() p
(int) k
( I0, ) p
(int) k
( I1, ) p
(int) k
( J0, ) p
(int) k
( J1, ) p
(int) k
( K0, ) p
(int) k
( K1, mxArr) p n
(ay **vertexMatrix, ) S
(int) k
( dI, ) p
(int) k
( dJ, ) p
(int) k
( dK\){) p n
(  ) S
(/*) c n
(  if\( I1 <= I0 \)) N
(    mexErrMsgTxt\("Error in triangulateCuboid\(\), must have I1 > I0"\);) N
(  if\( J1 <= J0 \)) N
(    mexErrMsgTxt\("Error in triangulateCuboid\(\), must have J1 > J0"\);) N
(  if\( K1 <= K0 \)) N
(    mexErrMsgTxt\("Error in triangulateCuboid\(\), must have K1 > K0"\);) N
(  */) N
(  ) p
(int) k
( coordmap1[] = {0,1,2};) p n
(  ) S
(int) k
( coordmap2[] = {1,2,0};) p n
(  ) S
(int) k
( coordmap3[] = {0,2,1};) p n
(  triangulatePlaneSkip\(I0, I1, J0, J1, K0, coordmap1, -1, &vertexMatrix[0], dI, ) N
(dJ\);) S
(//-ve z-axis s norm) c n
(  triangulatePlaneSkip\(I0, I1, J0, J1, K1, coordmap1,  1, &vertexMatrix[1], dI, ) p n
(dJ\);) S
(//+ve z-axis s norm) c n
() p n
(  triangulatePlaneSkip\(J0, J1, K0, K1, I0, coordmap2, -1, &vertexMatrix[2], dJ, ) N
(dK\);) S
(//-ve x-axis s norm) c n
(  triangulatePlaneSkip\(J0, J1, K0, K1, I1, coordmap2,  1, &vertexMatrix[3], dJ, ) p n
(dK\);) S
(//+ve x-axis s norm) c n
() p n
(  triangulatePlaneSkip\(I0, I1, K0, K1, J0, coordmap3,  1, &vertexMatrix[4], dI, ) N
(dK\);) S
(//-ve y-axis s norm) c n
(  triangulatePlaneSkip\(I0, I1, K0, K1, J1, coordmap3, -1, &vertexMatrix[5], dI, ) p n
(dK\);) S
(//+ve y-axis s norm) c n
(}) p n
() N
() N
(/* Generates a triangulation of a cuboid defined the surface of a regular) c n
(   grid. The result is returned in a concise manner, ie, a list of vertices) N
(   and a list of facets which index in to the list of vertices. ) N
() N
(   The list of vertices is itself a list of indices in to the x, y and z) N
(   grid label vectors. In this sense this function deals only with the topology) N
(   of the cuboid and the mesh. An extra step is required to generate the actual ) N
(   mesh from the values returned by this function.) N
() N
(   The surface of the volume [I0,I1]x[J0,J1]x[K0,K1] is meshed by) N
(   this function.) N
() N
(   *vertices is an array of vertices, each row is a numbered vertex.) N
() N
(   *facets is an array of facets each of which is created using 3 vertex indices) N
(.) N
(    Each index is an index in to the vertices array.) N
() N
(*/) N
(mesh_base.cpp) (Page 6/11) (Jun 20, 12 11:46) title
border
grestore
(Printed by Peter Munro) rhead
(mesh_base.cpp) (3/6) (Monday April 22, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(void) k
( conciseTriangulateCuboid\() p
(int) k
( I0, ) p
(int) k
( I1, ) p
(int) k
( J0, ) p
(int) k
( J1, ) p
(int) k
( K0, ) p
(int) k
( K1, ) p n
() S 8 T () S 16 T () S 24 T (      mxArray **vertices, mxArray ** facets\){) N
() N
(  ) N
() N
(  mxArray *triangles[6];) N
(  mxArray *index_map;) N
(  ) S
(int) k
( ndims, dims[3], ***index_map_int, nindices, **vertices_int, i, **facets_in) p n
(t, j,k, **triangles_int,ii,jj,kk;) N
(  ) S
(int) k
( ndims_v, dims_v[2];) p n
(  ) S
(int) k
( ndims_f, dims_f[2];) p n
(  ) S
(//int *dims_t;) c n
(  ) p
(const) K
( mwSize *dims_t;) p n
(  ) S
(int) k
( vertex_counter = 0, facets_counter = 0;) p n
(  ) S
(int) k
( temp_vertex[3];) p n
(  ) N
(  ) S
(/*) c n
(  if\( I1 <= I0 \)) N
(    mexErrMsgTxt\("Error in conciseTriangulateCuboid\(\), must have I1 > I0"\);) N
(  if\( J1 <= J0 \)) N
(    mexErrMsgTxt\("Error in conciseTriangulateCuboid\(\), must have J1 > J0"\);) N
(  if\( K1 <= K0 \)) N
(    mexErrMsgTxt\("Error in conciseTriangulateCuboid\(\), must have K1 > K0"\);) N
(  */) N
(  ) p
(//this will keep count of the indices which have been allocated) c n
(  ndims = 3;) p n
(  dims[0] = I1-I0+1;) N
(  dims[1] = J1-J0+1;) N
(  dims[2] = K1-K0+1;) N
( ) N
(  index_map = mxCreateNumericArray\( ndims, \() S
(const) K
( mwSize *\)dims, mxINT32_CLASS, ) p n
(mxREAL\);) N
(  index_map_int = castMatlab3DArrayInt\(\() S
(int) k
( *\)mxGetPr\(index_map\), dims[0], dims[) p n
(1], dims[2]\) ;) N
() N
(  ) S
(//now initialise each entry to -1) c n
(  ) p
(for) K
(\(i=0;i<dims[0];i++\)) p n
(    ) S
(for) K
(\(j=0;j<dims[1];j++\)) p n
(      ) S
(for) K
(\(k=0;k<dims[2];k++\)) p n
() S 8 T (index_map_int[k][j][i] = -1;) N
(  ) N
(  ) S
(//the total number of indices that we will have) c n
(  nindices = \(I1 - I0 + 1\)*\( J1 - J0 + 1\)*2 + \(I1 - I0 + 1\)*\(K1 - K0 - 1\)*2 + \(J) p n
(1 - J0 - 1\)*\(K1 - K0 - 1\)*2; ) N
(  ) S
(//fprintf\(stderr,"%d [%d %d %d %d %d %d]\\n",nindices,I0,I1,J0,J1,K0,K1\);) c n
(  ) p
(if) K
(\( I1==I0 \)) p n
(    nindices = \(J1 - J0 + 1\)*\(K1 - K0 + 1\);) N
(  ) S
(if) K
(\( J1==J0 \)) p n
(    nindices = \(I1 - I0 + 1\)*\(K1 - K0 + 1\);) N
(  ) S
(if) K
(\( K1==K0 \)) p n
(    nindices = \(I1 - I0 + 1\)*\(J1 - J0 + 1\);) N
() N
(  ) S
(//construct vertice array) c n
(  ndims_v = 2;) p n
(  dims_v[0] = nindices;) N
(  dims_v[1] = 3;) N
(  *vertices = mxCreateNumericArray\( ndims_v, \() S
(const) K
( mwSize *\)dims_v, mxINT32_CLA) p n
(SS, mxREAL\);) N
(  vertices_int = castMatlab2DArrayInt\(\() S
(int) k
( *\)mxGetPr\(*vertices\),dims_v[0], dims_) p n
(v[1]\);) N
(  ) S
(//now generate triangles) c n
(  triangulateCuboid\(I0,I1,J0,J1,K0,K1,triangles\);) p n
(  ) N
(  ) S
(//now setup the facet array) c n
(  ndims_f = 2;) p n
(  dims_f[0] = 4*\(I1-I0\)*\(J1-J0\) + 4*\(J1-J0\)*\(K1-K0\) + 4*\(I1-I0\)*\(K1-K0\) ;) S
(//the t) c n
(otal number of facets) N
(  ) p
(if) K
(\( I1==I0 || J1==J0 || K1==K0 \)) p n
(mesh_base.cpp) (Page 7/11) (Jun 20, 12 11:46) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    dims_f[0] = dims_f[0]/2;) p n
(  dims_f[1] = 3;) N
(  *facets = mxCreateNumericArray\( ndims_f, \() S
(const) K
( mwSize *\)dims_f, mxINT32_CLASS) p n
(, mxREAL\);) N
(  facets_int = castMatlab2DArrayInt\(\() S
(int) k
( *\)mxGetPr\(*facets\), dims_f[0], dims_f[1) p n
(]\);) N
(  ) S
(//now populate the matrices) c n
(  ) p
(for) K
(\(i=0;i<6;i++\){) p
(//loop over each plane) c n
(   ) p n
(    ) S
(if) K
(\( !\(i==2 && I0==I1\) && !\(i==0 && K0==K1\) && !\(i==4 && J0==J1\) \){) p n
(      ) N
(      dims_t = mxGetDimensions\(triangles[i]\);) N
(      triangles_int = castMatlab2DArrayInt\(\() S
(int) k
( *\)mxGetPr\(triangles[i]\), dims_t[) p n
(0], dims_t[1]\);) N
(      ) S
(for) K
(\(j=0;j<\() p
(int) k
(\)dims_t[0];j++\){) p
(//now iterate over triangle) c n
() p 8 T () N
() S 8 T () S
(for) K
(\(k=0;k<3;k++\){) p
(//now each vertex in the triangle) c n
() p 8 T (  ) S
(//first check if this vertex has been allocated) c n
() p 8 T (  kk = triangles_int[3*k+2][j];) N
() S 8 T (  jj = triangles_int[3*k+1][j];) N
() S 8 T (  ii = triangles_int[3*k][j];) N
() S 8 T (  ) N
() S 8 T (  ) S
(if) K
(\( index_map_int[kk-K0][jj-J0][ii-I0] == -1\){) p
(//not allocated yet) c n
() p 8 T (    index_map_int[kk-K0][jj-J0][ii-I0] = vertex_counter++;) N
() S 8 T (    vertices_int[0][vertex_counter-1] = ii;) N
() S 8 T (    vertices_int[1][vertex_counter-1] = jj;) N
() S 8 T (    vertices_int[2][vertex_counter-1] = kk;) N
() S 8 T (    ) N
() S 8 T (  }) S
(//of allocating new vertex) c n
() p 8 T (  temp_vertex[k] = index_map_int[kk-K0][jj-J0][ii-I0];) N
() S 8 T (  ) N
() S 8 T (}) S
(//of loop on each vertex) c n
() p 8 T (facets_int[0][facets_counter] = temp_vertex[0];) N
() S 8 T (facets_int[1][facets_counter] = temp_vertex[1];) N
() S 8 T (facets_int[2][facets_counter++] = temp_vertex[2];) N
() S 8 T () N
(      }) S
(//of loope on each triangle) c n
(      freeCastMatlab2DArrayInt\(triangles_int\);) p n
(    }) N
(  }) S
(//of loop over each plane) c n
(  ) p n
() N
(  ) S
(//free memory etc) c n
(  freeCastMatlab3DArrayInt\(index_map_int,dims[2]\);) p n
(  freeCastMatlab2DArrayInt\(facets_int\);) N
(  freeCastMatlab2DArrayInt\(vertices_int\);) N
() N
(  ) S
(for) K
(\(i=0;i<6;i++\)) p n
(    mxDestroyArray\(triangles[i]\);) N
(}) N
() N
(void) k
( conciseTriangulateCuboidSkip\() p
(int) k
( I0, ) p
(int) k
( I1, ) p
(int) k
( J0, ) p
(int) k
( J1, ) p
(int) k
( K0, ) p
(int) k
( K1) p n
(, ) N
() S 8 T () S 16 T () S 24 T () S 32 T (  ) S
(int) k
( dI, ) p
(int) k
( dJ, ) p
(int) k
( dK,) p n
() S 8 T () S 16 T () S 24 T () S 32 T (  mxArray **vertices, mxArray ** facets\){) N
(  ) N
(  mxArray *triangles[6];) N
(  mxArray *index_map;) N
(  ) S
(int) k
( ndims, ***index_map_int, nindices, **vertices_int, i, **facets_int, j,k, *) p n
(*triangles_int,ii,jj,kk;) N
(  ) S
(int) k
( ndims_v;) p
(//, dims_v[2];) c n
(  ) p
(int) k
( ndims_f;) p
(//, dims_f[2];) c n
(  ) p
(//  int *dims_t;) c n
(  ) p
(const) K
( mwSize *dims_t;) p n
(  mwSize *dims_v, *dims_f, *dims;) N
(  ) S
(int) k
( vertex_counter = 0, facets_counter = 0;) p n
(  ) S
(int) k
( temp_vertex[3];) p n
(  ) N
(  dims_v = \(mwSize *\)malloc\(2*) S
(sizeof) K
(\(mwSize\)\);) p n
(mesh_base.cpp) (Page 8/11) (Jun 20, 12 11:46) title
border
grestore
(Printed by Peter Munro) rhead
(mesh_base.cpp) (4/6) (Monday April 22, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (9-10) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  dims_f = \(mwSize *\)malloc\(2*) p
(sizeof) K
(\(mwSize\)\);) p n
() N
(  ) S
(/*) c n
(  if\( I1 <= I0 \)) N
(    mexErrMsgTxt\("Error in conciseTriangulateCuboid\(\), must have I1 > I0"\);) N
(  if\( J1 <= J0 \)) N
(    mexErrMsgTxt\("Error in conciseTriangulateCuboid\(\), must have J1 > J0"\);) N
(  if\( K1 <= K0 \)) N
(    mexErrMsgTxt\("Error in conciseTriangulateCuboid\(\), must have K1 > K0"\);) N
(  */) N
(  ) p
(//this will keep count of the indices which have been allocated) c n
(  dims = \(mwSize *\)malloc\(3*) p
(sizeof) K
(\(mwSize\)\);) p n
(  ndims = 3;) N
(  dims[0] = \(I1-I0\)/dI+1;) N
(  dims[1] = \(J1-J0\)/dJ+1;) N
(  dims[2] = \(K1-K0\)/dK+1;) N
( ) N
(  index_map = mxCreateNumericArray\( ndims, \() S
(const) K
( mwSize *\)dims, mxINT32_CLASS, ) p n
(mxREAL\);) N
(  index_map_int = castMatlab3DArrayInt\(\() S
(int) k
( *\)mxGetPr\(index_map\), dims[0], dims[) p n
(1], dims[2]\) ;) N
(  ) N
(  ) S
(//now initialise each entry to -1) c n
(  ) p
(for) K
(\(i=0;i<\() p
(int) k
(\)dims[0];i++\)) p n
(    ) S
(for) K
(\(j=0;j<\() p
(int) k
(\)dims[1];j++\)) p n
(      ) S
(for) K
(\(k=0;k<\() p
(int) k
(\)dims[2];k++\)) p n
() S 8 T (index_map_int[k][j][i] = -1;) N
(    ) S
(//the total number of indices that we will have) c n
(  ) p
(int) k
( Iw, Jw, Kw;) p n
(  Iw = \(I1-I0\)/dI+1;) N
(  Jw = \(J1-J0\)/dJ+1;) N
(  Kw = \(K1-K0\)/dK+1;) N
() N
(  nindices = Iw*Jw*2 + Iw*\(Kw-2\)*2 + \(Jw-2\)*\(Kw-2\)*2; ) N
(  ) S
(//  fprintf\(stderr,"%d [%d %d %d]\\n",nindices,Iw,Jw,Kw\);) c n
(  ) p
(if) K
(\( \(I1-I0\)<dI \)) p n
(    nindices = Jw*Kw;) N
(  ) S
(if) K
(\( \(J1-J0\)<dJ \)) p n
(    nindices = Iw*Kw;) N
(  ) S
(if) K
(\( \(K1-K0\)<dK \)) p n
(    nindices = Iw*Jw;) N
() N
(  ) S
(//construct vertice array) c n
(  ndims_v = 2;) p n
(  dims_v[0] = nindices;) N
(  dims_v[1] = 3;) N
(  *vertices = mxCreateNumericArray\( ndims_v, \() S
(const) K
( mwSize *\)dims_v, mxINT32_CLA) p n
(SS, mxREAL\);) N
(  ) N
(  vertices_int = castMatlab2DArrayInt\(\() S
(int) k
( *\)mxGetPr\(*vertices\),dims_v[0], dims_) p n
(v[1]\);) N
(  ) S
(//now generate triangles) c n
(  triangulateCuboidSkip\(I0,I1,J0,J1,K0,K1,triangles,dI,dJ,dK\);) p n
(  ) N
(  ) S
(//now setup the facet array) c n
(  ndims_f = 2;) p n
(  dims_f[0] = 4*\(Iw-1\)*\(Jw-1\) + 4*\(Jw-1\)*\(Kw-1\) + 4*\(Iw-1\)*\(Kw-1\) ;) S
(//the total n) c n
(umber of facets) N
(  ) p
(if) K
(\( \(I1-I0\)<dI || \(J1-J0\)<dJ || \(K1-K0\)<dK \)) p n
(    dims_f[0] = dims_f[0]/2;) N
(  dims_f[1] = 3;) N
(  *facets = mxCreateNumericArray\( ndims_f, \() S
(const) K
( mwSize *\)dims_f, mxINT32_CLASS) p n
(, mxREAL\);) N
(  facets_int = castMatlab2DArrayInt\(\() S
(int) k
( *\)mxGetPr\(*facets\), dims_f[0], dims_f[1) p n
(]\);) N
( ) N
(  ) S
(//now populate the matrices) c n
(  ) p
(for) K
(\(i=0;i<6;i++\){) p
(//loop over each plane) c n
(    ) p
(//    fprintf\(stderr,"Here %d\\n",i\);) c n
(mesh_base.cpp) (Page 9/11) (Jun 20, 12 11:46) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    ) p
(if) K
(\( !\(i==2 && \(I1-I0\)<dI\) && !\(i==0 && \(K1-K0\)<dK\) && !\(i==4 && \(J1-J0\)<dJ\) ) p n
(\){) N
(      dims_t = mxGetDimensions\(triangles[i]\);) N
(      triangles_int = castMatlab2DArrayInt\(\() S
(int) k
( *\)mxGetPr\(triangles[i]\), dims_t[) p n
(0], dims_t[1]\);) N
(      ) S 8 T (    ) N
(      ) S
(for) K
(\(j=0;j<\() p
(int) k
(\)dims_t[0];j++\){) p
(//now iterate over triangle) c n
() p 8 T () N
() S 8 T () S
(for) K
(\(k=0;k<3;k++\){) p
(//now each vertex in the triangle) c n
() p 8 T (  ) S
(//first check if this vertex has been allocated) c n
() p 8 T (  kk = triangles_int[3*k+2][j];) N
() S 8 T (  jj = triangles_int[3*k+1][j];) N
() S 8 T (  ii = triangles_int[3*k][j];) N
() S 8 T (  ) S
(if) K
(\( index_map_int[\(kk-K0\)/dK][\(jj-J0\)/dJ][\(ii-I0\)/dI] == -1\){) p
(//not all) c n
(ocated yet) N
() p 8 T (    index_map_int[\(kk-K0\)/dK][\(jj-J0\)/dJ][\(ii-I0\)/dI] = vertex_counter++) N
(;) N
() S 8 T (    vertices_int[0][vertex_counter-1] = ii;) N
() S 8 T (    vertices_int[1][vertex_counter-1] = jj;) N
() S 8 T (    vertices_int[2][vertex_counter-1] = kk;) N
() S 8 T (    ) N
() S 8 T (  }) S
(//of allocating new vertex) c n
() p 8 T (  temp_vertex[k] = index_map_int[\(kk-K0\)/dK][\(jj-J0\)/dJ][\(ii-I0\)/dI];) N
() S 8 T (}) S
(//of loop on each vertex) c n
() p 8 T (facets_int[0][facets_counter] = temp_vertex[0];) N
() S 8 T (facets_int[1][facets_counter] = temp_vertex[1];) N
() S 8 T (facets_int[2][facets_counter++] = temp_vertex[2];) N
(      }) S
(//of loope on each triangle) c n
(      freeCastMatlab2DArrayInt\(triangles_int\);) p n
(    }) N
(  }) S
(//of loop over each plane) c n
(  ) p n
(  ) S
(//free memory etc) c n
(  freeCastMatlab3DArrayInt\(index_map_int,dims[2]\);) p n
(  freeCastMatlab2DArrayInt\(facets_int\);) N
(  freeCastMatlab2DArrayInt\(vertices_int\);) N
() N
(  ) S
(for) K
(\(i=0;i<6;i++\)) p n
(    mxDestroyArray\(triangles[i]\);) N
(  free\(dims\);) N
(  free\(dims_v\);) N
(  free\(dims_f\);) N
(}) N
() N
() N
(/*Determines the vector which points from p1 to p2*/) c n
(void) k
( pointsToVector\() p
(int) k
( p1[], ) p
(int) k
( p2[], ) p
(int) k
( *vector\){) p n
(  ) S
(int) k
( i;) p n
(  ) S
(for) K
(\(i=0;i<3;i++\)) p n
(    vector[i] = p2[i] - p1[i];) N
() N
(}) N
() N
(/*Calculates v1xv2*/) c n
(void) k
( crossProduct\() p
(int) k
( v1[], ) p
(int) k
( v2[], ) p
(int) k
( *v1crossv2\){) p n
(  v1crossv2[0] = v1[1]*v2[2] - v1[2]*v2[1];) N
(  v1crossv2[1] = v1[2]*v2[0] - v1[0]*v2[2];) N
(  v1crossv2[2] = v1[0]*v2[1] - v1[1]*v2[0];) N
(}) N
() N
() N
(/*) c n
(void mexFunction\(int nlhs, mxArray *plhs[], int nrhs,const mxArray *prhs[]\){) N
(  int I0, I1, J0, J1, K,K0,K1, dI, dJ,dK, counter = 0,coordmap[3];//triangulate ) N
(plane) N
(  int *p1, *p2, *p3, v1[3], v2[3], *cross, dims[2];//testing cross product) N
() N
(  int coordmap1[] = {0,1,2};) N
(  ) N
(mesh_base.cpp) (Page 10/11) (Jun 20, 12 11:46) title
border
grestore
(Printed by Peter Munro) rhead
(mesh_base.cpp) (5/6) (Monday April 22, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (11) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  if\(nrhs != 9\)) c n
(      mexErrMsgTxt\("Incorrect number of input parameters"\);) N
(      ) N
(    I0 = \(\(int\) *mxGetPr\(prhs[counter++]\)\);) N
(    I1 = \(\(int\) *mxGetPr\(prhs[counter++]\)\);) N
(    J0 = \(\(int\) *mxGetPr\(prhs[counter++]\)\);) N
(    J1 = \(\(int\) *mxGetPr\(prhs[counter++]\)\);) N
(    ) N
(    //) N
(    //K = \(\(int\) *mxGetPr\(prhs[counter++]\)\);) N
() N
(    K0 = \(\(int\) *mxGetPr\(prhs[counter++]\)\);) N
(    K1 = \(\(int\) *mxGetPr\(prhs[counter++]\)\);) N
(    dI = \(\(int\) *mxGetPr\(prhs[counter++]\)\);) N
(    dJ = \(\(int\) *mxGetPr\(prhs[counter++]\)\);) N
(    dK = \(\(int\) *mxGetPr\(prhs[counter++]\)\);) N
(    ) N
(    if\( nlhs != 4\)) N
(      mexErrMsgTxt\("Must have 6 output argument"\);) N
(    ) N
(    ) N
(    conciseTriangulateCuboidSkip\(I0, I1, J0, J1, K0, K1, ) N
() S 8 T () S 16 T () S 24 T () S 32 T ( dI, dJ, dK,) N
() S 8 T () S 16 T () S 24 T () S 32 T ( \(mxArray **\)plhs, \(mxArray **\)\(plhs+1\)\);) N
(    conciseTriangulateCuboid\(I0, I1, J0, J1, K0, K1, ) N
() S 8 T () S 16 T () S 24 T (  \(mxArray **\)\(plhs+2\), \(mxArray **\)\(plhs+3\)\);) N
(    //triangulatePlaneSkip\(I0, I1, J0, J1, K,coordmap1, 1, \(mxArray **\)&plhs[0],) N
( dI, dJ\);) N
(    //triangulatePlane\(I0, I1, J0, J1, K,coordmap1, 1, \(mxArray **\)&plhs[1]\);) N
(    //triangulateCuboidSkip\(I0, I1, J0, J1, K0, K1,\(mxArray **\)plhs,dI, dJ,dK\);) N
(    //triangulateCuboid\(I0, I1, J0, J1, K0, K1,\(mxArray **\)\(plhs+6\)\);) N
(    //[o11 o12 o13 o14 o15 o16 o21 o22 o23 o24 o25 o26] = mesh_base\(1,3,1,3,1,3,) N
(2,2,2\)) N
(    //[o11 o12 o13 o14 o15 o16] = mesh_base\(1,3,1,3,1,3,2,2,2\)) N
(    //mex -v mesh_base.cpp /home/ptpc2/prmunro/code/ptws1/matlablibrary/matlabio) N
(3/matlabio.cpp -I/home/ptpc2/prmunro/code/ptws1/matlablibrary/matlabio/) N
() N
(    //conciseTriangulateCuboid\(I0, I1, J0, J1, K0, K1, \(mxArray **\)&plhs[0], \(mx) N
(Array **\)&plhs[1]\);) N
(  ) N
(    ) N
(  ) N
(}) N
(*/) N
(mesh_base.cpp) (Page 11/11) (Jun 20, 12 11:46) title
border
grestore
(Printed by Peter Munro) rhead
(mesh_base.cpp) (6/6) (Monday April 22, 2013) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
